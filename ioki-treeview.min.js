angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function($compile){"use strict";return{compile:function(element,link){angular.isFunction(link)&&(link={post:link});var compiledContents,contents=element.contents().remove();return{pre:link&&link.pre?link.pre:null,post:function(scope,element){compiledContents||(compiledContents=$compile(contents)),compiledContents(scope,function(clone){element.append(clone)}),link&&link.post&&link.post.apply(null,arguments)}}}}}]),angular.module("ioki.treeview",["RecursionHelper"]).provider("$treeview",function(){"use strict";var defaults=this.defaults={prefixClass:"treeview-",prefixEvent:"treeview",treesettings:{expandable:!0,expandAll:!0,showExpander:!0,deletable:!1,addable:!1,selectable:!1}};this.$get=function(){function TreeViewFactory(config){function setPropertyForAllNodes(prop,value){var rootScope,rootNode,subnodes;"string"==typeof prop&&"undefined"!=typeof value&&(rootScope=getRootNode(scope),rootNode=rootScope.treedata,subnodes=rootNode.subnodes,rootNode[prop]=value,setPropertyForSubnodes(subnodes,prop,value))}function setPropertyForSubnodes(actualSubnodes,prop,value){var i,arrLen;if(angular.isArray(actualSubnodes))for(i=0,arrLen=actualSubnodes.length,i;arrLen>i;i++)actualSubnodes[i][prop]=value,setPropertyForSubnodes(actualSubnodes[i].subnodes,prop,value)}function getRootNode(scope){return"undefined"==typeof scope.$parent.$parent.treedata?scope:getRootNode(scope.$parent.$parent)}var options,scope,$treeview={};options=$treeview.$options=angular.extend({},defaults,config);for(var prop in defaults.treesettings)defaults.treesettings.hasOwnProperty(prop)&&"undefined"==typeof config.treesettings[prop]&&(options.treesettings[prop]=defaults.treesettings[prop]);return scope=$treeview.$scope=options.scope,scope.treesettings=options.treesettings,scope.treedata.$removable="undefined"!=typeof scope.$parent.$parent.treedata&&options.treesettings.deletable?!0:!1,options.treesettings.expandAll&&(scope.treedata.expanded=!0),scope.$toggleNode=function(){$treeview.toggleNode()},scope.$selectNode=function(){$treeview.selectNode()},$treeview.toggleNode=function(){options.treesettings.expandable&&(scope.treedata.expanded=!scope.treedata.expanded)},$treeview.selectNode=function(){var state;options.treesettings.selectable&&(state=scope.treedata.selected,setPropertyForAllNodes("selected",!1),scope.treedata.selected=!state)},$treeview}return TreeViewFactory}}).directive("treeview",function(RecursionHelper,$treeview){"use strict";return{restrict:"E",scope:{treedata:"=",treesettings:"="},templateUrl:"../src/js/ioki-treeview.tpl.html",compile:function(element){return RecursionHelper.compile(element,function(scope,element){var options={scope:scope,element:element,treesettings:{}};angular.isDefined(scope.treesettings)&&angular.copy(scope.treesettings,options.treesettings),$treeview(options)})}}}),angular.module("ioki.treeview").filter("getNodeIcon",function(){"use strict";return function(node,icons){var icon;return"string"==typeof node.type&&"undefined"!=typeof icons[node.type]?(icon=icons[node.type],null!==icon&&"object"==typeof icon?(node.expanded=node.expanded||!1,node.expanded?icon.open:icon.closed):icon):null}});