angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function($compile){"use strict";return{compile:function(element,link){angular.isFunction(link)&&(link={post:link});var compiledContents,contents=element.contents().remove();return{pre:link&&link.pre?link.pre:null,post:function(scope,element){compiledContents||(compiledContents=$compile(contents)),compiledContents(scope,function(clone){element.append(clone)}),link&&link.post&&link.post.apply(null,arguments)}}}}}]),angular.module("ioki.treeview",["RecursionHelper"]).provider("$treeview",function(){"use strict";var defaults=this.defaults={prefixClass:"treeview-",prefixEvent:"treeview",treesettings:{interfaceIcons:{addNode:"fa-plus-circle",removeNode:"fa-minus-circle",openDir:"fa-caret-down",closeDir:"fa-caret-right"},expandable:!0,expandAll:!0,showExpander:!0,removable:!1,addable:!0,selectable:!1,customMethods:{addNode:null,removeNode:null}}};this.$get=function(){function TreeViewFactory(config){function setPropertyForAllNodes(prop,value){var rootScope,rootNode,subnodes;"string"==typeof prop&&"undefined"!=typeof value&&(rootScope=getRootNode(scope),rootNode=rootScope.treedata,subnodes=rootNode.subnodes,rootNode[prop]=value,setPropertyForSubnodes(subnodes,prop,value))}function setPropertyForSubnodes(actualSubnodes,prop,value){var i,arrLen;if(angular.isArray(actualSubnodes))for(i=0,arrLen=actualSubnodes.length,i;arrLen>i;i++)actualSubnodes[i][prop]=value,setPropertyForSubnodes(actualSubnodes[i].subnodes,prop,value)}function getRootNode(scope){return"undefined"==typeof scope.$parent.$parent.treedata?scope:getRootNode(scope.$parent.$parent)}var options,scope,$treeview={};options=$treeview.$options=angular.extend({},defaults,config);for(var prop in defaults.treesettings)defaults.treesettings.hasOwnProperty(prop)&&"undefined"==typeof config.treesettings[prop]&&(options.treesettings[prop]=defaults.treesettings[prop]);return scope=$treeview.$scope=options.scope,scope.treesettings=options.treesettings,scope.treedata.$removable="undefined"!=typeof scope.$parent.$parent.treedata&&options.treesettings.removable?!0:!1,options.treesettings.expandAll&&(scope.treedata.expanded=!0),scope.$addNode=function(){$treeview.addNode()},scope.$removeNode=function(){$treeview.removeNode()},scope.$toggleNode=function(){$treeview.toggleNode()},scope.$selectNode=function(){$treeview.selectNode()},$treeview.toggleNode=function(){options.treesettings.expandable&&(scope.treedata.expanded=!scope.treedata.expanded)},$treeview.selectNode=function(){var state;options.treesettings.selectable&&(state=scope.treedata.selected,setPropertyForAllNodes("selected",!1),scope.treedata.selected=!state)},$treeview.addNode=function(){options.treesettings.addable&&"function"==typeof options.treesettings.customMethods.addNode&&options.treesettings.customMethods.addNode(scope)},$treeview.removeNode=function(){var parent,subnodesArray,index,node=scope.treedata;options.treesettings.removable&&("function"==typeof options.treesettings.customMethods.removeNode?options.treesettings.customMethods.removeNode(scope):(parent=scope.$parent.$parent.treedata,"undefined"!=typeof parent&&(subnodesArray=parent.subnodes,angular.isArray(subnodesArray)&&(index=subnodesArray.indexOf(node),index>-1&&subnodesArray.splice(index,1)))))},$treeview}return TreeViewFactory}}).directive("treeview",function(RecursionHelper,$treeview){"use strict";return{restrict:"E",scope:{treedata:"=",treesettings:"="},templateUrl:"templates/ioki-treeview",compile:function(element){return RecursionHelper.compile(element,function(scope,element){var options={scope:scope,element:element,treesettings:{}};angular.isDefined(scope.treesettings)&&angular.copy(scope.treesettings,options.treesettings),$treeview(options)})}}}),angular.module("ioki.treeview").run(["$templateCache",function($templateCache){"use strict";$templateCache.put("templates/ioki-treeview",'<div ng-class="{\'expanded\': treedata.expanded, \'selected\': treedata.selected}"\n     ng-click="$selectNode()">\n    <!-- expander icon -->\n    <i class="expander fa"\n       ng-class="(treedata.subnodes && treesettings.showExpander) ? (treedata.expanded ? treesettings.interfaceIcons.openDir : treesettings.interfaceIcons.closeDir) : \'invisible\'"\n       ng-click="$toggleNode()"></i>\n\n    <!-- node icon -->\n    <i class="fa {{treedata | getNodeIcon: treesettings.icons}}"></i> {{ treedata.name }}\n\n    <!-- remove node icon -->\n    <i class="remove-node fa {{treesettings.interfaceIcons.removeNode}}"\n       ng-click="$removeNode()"\n       ng-class="{\'invisible\': !treedata.$removable}"></i>\n\n    <!-- add node icon -->\n    <i class="add-node fa {{treesettings.interfaceIcons.addNode}}"\n       ng-click="$addNode()"\n       ng-class="{\'invisible\': (!treesettings.addable || !treedata.subnodes)}"></i>\n</div>\n<ul ng-class="{\'expanded\': treedata.expanded}">\n    <li ng-repeat="subnode in treedata.subnodes track by $index">\n        <treeview treedata="subnode" treesettings="treesettings"></treeview>\n    </li>\n</ul>')}]),angular.module("ioki.treeview").filter("getNodeIcon",function(){"use strict";return function(node,icons){var icon;return"string"==typeof node.type&&"undefined"!=typeof icons[node.type]?(icon=icons[node.type],null!==icon&&"object"==typeof icon?(node.expanded=node.expanded||!1,node.expanded?icon.open:icon.closed):icon):null}});