angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function(a){"use strict";return{compile:function(b,c){angular.isFunction(c)&&(c={post:c});var d,e=b.contents().remove();return{pre:c&&c.pre?c.pre:null,post:function(b,f){d||(d=a(e)),d(b,function(a){f.append(a)}),c&&c.post&&c.post.apply(null,arguments)}}}}}]),angular.module("ioki.treeview",["RecursionHelper"]).provider("$treeview",function(){"use strict";var a=this.defaults={prefixClass:"treeview-",prefixEvent:"treeview",treesettings:{template:"templates/ioki-treeview",iconsBaseClass:"fa",interfaceIcons:{addNode:"fa-plus-circle",removeNode:"fa-minus-circle",openDir:"fa-caret-down",closeDir:"fa-caret-right"},expandable:!0,expandAll:!0,showExpander:!0,removable:!1,addable:!0,selectable:!1,customMethods:{addNode:null,removeNode:null}}};this.$get=function(){function b(b){function c(a,b){var c,f,h;"string"==typeof a&&"undefined"!=typeof b&&(c=e(g),f=c.treedata,h=f.subnodes,f[a]=b,d(h,a,b))}function d(a,b,c){var e,f;if(angular.isArray(a))for(e=0,f=a.length,e;f>e;e++)a[e][b]=c,d(a[e].subnodes,b,c)}function e(a){return"undefined"==typeof a.$parent.$parent.treedata?a:e(a.$parent.$parent)}var f,g,h,i={};f=i.$options=angular.extend({},a,b);for(h in a.treesettings)a.treesettings.hasOwnProperty(h)&&"undefined"==typeof b.treesettings[h]&&(f.treesettings[h]=a.treesettings[h]);if("undefined"!=typeof b.treesettings.interfaceIcons)for(h in a.treesettings.interfaceIcons)a.treesettings.interfaceIcons.hasOwnProperty(h)&&"undefined"==typeof b.treesettings.interfaceIcons[h]&&(f.treesettings.interfaceIcons[h]=a.treesettings.interfaceIcons[h]);return g=i.$scope=f.scope,g.treesettings=f.treesettings,g.treedata.$removable="undefined"!=typeof g.$parent.$parent.treedata&&f.treesettings.removable?!0:!1,f.treesettings.expandAll&&(g.treedata.expanded=!0),g.$addNode=function(a){i.addNode(a)},g.$removeNode=function(){i.removeNode()},g.$toggleNode=function(){i.toggleNode()},g.$selectNode=function(){i.selectNode()},i.toggleNode=function(){f.treesettings.expandable&&(g.treedata.expanded=!g.treedata.expanded)},i.selectNode=function(){var a;f.treesettings.selectable&&(a=g.treedata.selected,c("selected",!1),g.treedata.selected=!a)},i.addNode=function(a){f.treesettings.addable&&"function"==typeof f.treesettings.customMethods.addNode&&f.treesettings.customMethods.addNode(g,a)},i.removeNode=function(){var a,b,c,d=g.treedata;f.treesettings.removable&&("function"==typeof f.treesettings.customMethods.removeNode?f.treesettings.customMethods.removeNode(g):(a=g.$parent.$parent.treedata,"undefined"!=typeof a&&(b=a.subnodes,angular.isArray(b)&&(c=b.indexOf(d),c>-1&&b.splice(c,1)))))},i}return b}}).directive("treeview",["RecursionHelper","$treeview","$templateCache","$compile",function(a,b,c,d){"use strict";return{restrict:"E",scope:{treedata:"=",treesettings:"="},compile:function(e){return a.compile(e,function(a,e){var f,g,h,i;f=a.treesettings.template||"templates/ioki-treeview",g=c.get(f),h=d(g)(a),e.append(h),i={scope:a,element:e,treesettings:{}},angular.isDefined(a.treesettings)&&angular.copy(a.treesettings,i.treesettings),b(i)})}}}]),angular.module("ioki.treeview").run(["$templateCache",function(a){"use strict";a.put("templates/ioki-treeview",'<div ng-class="{\'expanded\': treedata.expanded, \'selected\': treedata.selected}"\n     ng-click="$selectNode()">\n    <!-- expander icon -->\n    <i class="expander {{treesettings.iconsBaseClass}}"\n       ng-class="(treedata.subnodes && treesettings.showExpander) ? (treedata.expanded ? treesettings.interfaceIcons.openDir : treesettings.interfaceIcons.closeDir) : \'invisible\'"\n       ng-click="$toggleNode()"></i>\n\n    <!-- node icon -->\n    <i class="{{treesettings.iconsBaseClass}} {{treedata | getNodeIcon: treesettings.icons}}"></i> {{ treedata.name }}\n\n    <!-- remove node icon -->\n    <i class="remove-node {{treesettings.iconsBaseClass}} {{treesettings.interfaceIcons.removeNode}}"\n       ng-click="$removeNode()"\n       ng-class="{\'invisible\': !treedata.$removable}"></i>\n\n    <!-- add node icon -->\n    <i class="add-node {{treesettings.iconsBaseClass}} {{treesettings.interfaceIcons.addNode}}"\n       ng-click="$addNode()"\n       ng-class="{\'invisible\': (!treesettings.addable || !treedata.subnodes)}"></i>\n</div>\n<ul ng-class="{\'expanded\': treedata.expanded}">\n    <li ng-repeat="subnode in treedata.subnodes track by $index">\n        <treeview treedata="subnode" treesettings="treesettings"></treeview>\n    </li>\n</ul>')}]),angular.module("ioki.treeview").filter("getNodeIcon",function(){"use strict";return function(a,b){var c;return"string"==typeof a.type&&"undefined"!=typeof b[a.type]?(c=b[a.type],null!==c&&"object"==typeof c?(a.expanded=a.expanded||!1,a.expanded?c.open:c.closed):c):null}});